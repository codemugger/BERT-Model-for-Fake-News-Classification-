# -*- coding: utf-8 -*-
"""cs3244.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_uQuwyBvmCl2PS7NOGPz0_3y5gDRtqhI
"""

import numpy as np
import pandas as pd
import re
import nltk
from nltk.corpus import stopwords
from nltk.stem.porter import PorterStemmer
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score
from nltk.stem.porter import PorterStemmer
from sklearn.metrics import confusion_matrix
from sklearn.metrics import classification_report

news_data = pd.read_csv('train.csv')
news_data.head()

# drop rows with null values
news_data = news_data.dropna()

# merging the author name and news title
news_data['text'] = news_data['author']+' '+news_data['title']+' '+news_data['text']
news_data.drop('author', axis=1, inplace=True)
news_data.drop('title', axis=1, inplace=True)
news_data.head()

port_stem = PorterStemmer()

def stemming(text):
    review = re.sub('[^a-zA-Z]',' ',text)
    review = review.lower()
    # get rid of non words and extra spaces
    review = re.sub('\\W', ' ', review)
    review = re.sub('\n', '', review)
    review = re.sub(' +', ' ', review)
    review = re.sub('^ ', '', review)
    review = re.sub(' $', '', review)
    review = review.split()
    review = [port_stem.stem(word) for word in review if not word in stopwords.words('english')]
    review = ' '.join(review)
    return review

print(stemming("Hello this is a          test line @@@ haha &&& testing testing testing"))

news_data['text'] = news_data['text'].apply(stemming)

# separating the data and label
features = news_data['text'].values
targets = news_data['label'].values

# converting the textual data to numerical data
vectorizer = TfidfVectorizer()
vectorizer.fit(features)
features = vectorizer.transform(features)

# Split into training and testing
X_train, X_test, y_train, y_test = train_test_split(features, targets, test_size=0.20, random_state=18)

from sklearn.naive_bayes import MultinomialNB
model=MultinomialNB()
model.fit(X_train, y_train)

# accuracy score on the test data
prediction = model.predict(X_test)
test_accuracy = accuracy_score(prediction, y_test)

print('Accuracy score of the test data : ', test_accuracy)